import logging
import os
import psycopg2
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 6422904023

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8144499111:AAE-GWIYuutlUoeJPFVOs0En7HOh7S53dfM"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
DATABASE_URL = os.environ.get('DATABASE_URL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            product TEXT,
            amount TEXT,
            screenshot TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton("–ö—É–ø–∏—Ç—å"), KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
def buy_menu():
    keyboard = [
        [InlineKeyboardButton("Fatality Client 1 –º–µ—Å—è—Ü 50‚ÇΩ/0.5$", callback_data='buy_1month')],
        [InlineKeyboardButton("Fatality Client Beta –Ω–∞–≤—Å–µ–≥–¥–∞ - 199‚ÇΩ/2$", callback_data='buy_beta')],
        [InlineKeyboardButton("Fatality Client –ù–∞–≤—Å–µ–≥–¥–∞ 599‚ÇΩ/6$", callback_data='buy_forever')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ê–¥–º–∏–Ω –º–µ–Ω—é
def admin_menu():
    keyboard = [
        [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data='admin_orders')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
def order_management_menu(order_id):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{order_id}'),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{order_id}')
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_orders')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
async def send_message_with_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None, parse_mode=None):
    try:
        with open('main.png', 'rb') as photo:
            if hasattr(update, 'message') and update.message:
                await update.message.reply_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            elif hasattr(update, 'callback_query') and update.callback_query:
                await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª main.png –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Fatality Client üíû\n"
        "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∫–ª–∏–µ–Ω—Ç? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"
    )
    
    await send_message_with_photo(update, context, welcome_text, main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–ö—É–ø–∏—Ç—å":
        buy_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        await send_message_with_photo(update, context, buy_text, buy_menu())
    
    elif text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        info_text = (
            "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Fatality Client*\n\n"
            "Fatality Client –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω 04.06.2026 ‚ö†Ô∏è\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥—ë—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚è≥"
        )
        await send_message_with_photo(update, context, info_text, main_menu(), ParseMode.MARKDOWN)
    
    else:
        # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ
        welcome_text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Fatality Client üíû\n"
            "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∫–ª–∏–µ–Ω—Ç? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"
        )
        await send_message_with_photo(update, context, welcome_text, main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = query.from_user

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
    if data.startswith('buy_'):
        products = {
            'buy_1month': {'name': 'Fatality Client 1 –º–µ—Å—è—Ü', 'price': '50‚ÇΩ/0.5$'},
            'buy_beta': {'name': 'Fatality Client Beta –Ω–∞–≤—Å–µ–≥–¥–∞', 'price': '199‚ÇΩ/2$'},
            'buy_forever': {'name': 'Fatality Client –ù–∞–≤—Å–µ–≥–¥–∞', 'price': '599‚ÇΩ/6$'}
        }
        
        product = products[data]
        instruction_text = (
            f"üí≥ *–û–ø–ª–∞—Ç–∞ {product['name']}*\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {product['price']}\n\n"
            f"üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:*\n"
            f"1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @AttackSindrom\n"
            f"2. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ–ø–ª–∞—Ç–æ–π\n"
            f"3. –ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        
        await send_message_with_photo(update, context, instruction_text, None, ParseMode.MARKDOWN)
        context.user_data['awaiting_payment'] = data
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    elif data == 'admin_panel':
        if user.id != ADMIN_ID:
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        
        admin_text = "üë®‚Äçüíº *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*"
        try:
            with open('main.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=admin_text,
                    reply_markup=admin_menu(),
                    parse_mode=ParseMode.MARKDOWN
                )
            await query.message.delete()
        except FileNotFoundError:
            await query.edit_message_text(
                admin_text,
                reply_markup=admin_menu(),
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
    elif data == 'admin_orders':
        if user.id != ADMIN_ID:
            return
        
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM orders WHERE status = %s ORDER BY created_at DESC', ('pending',))
        pending_orders = cursor.fetchall()
        conn.close()
        
        if not pending_orders:
            admin_text = "üì¶ *–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã*\n\n–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤."
            try:
                with open('main.png', 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo,
                        caption=admin_text,
                        reply_markup=admin_menu(),
                        parse_mode=ParseMode.MARKDOWN
                    )
                await query.message.delete()
            except FileNotFoundError:
                await query.edit_message_text(
                    admin_text,
                    reply_markup=admin_menu(),
                    parse_mode=ParseMode.MARKDOWN
                )
            return
        
        order_text = "üì¶ *–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã:*\n\n"
        for order in pending_orders:
            order_id, user_id, username, product, amount, screenshot, status, created_at = order
            order_text += f"üÜî –ó–∞–∫–∞–∑ #{order_id}\n"
            order_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or 'N/A'} (ID: {user_id})\n"
            order_text += f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product}\n"
            order_text += f"üí∞ –°—É–º–º–∞: {amount}\n"
            order_text += f"üìÖ –î–∞—Ç–∞: {created_at}\n"
            order_text += f"üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç: {'–ï—Å—Ç—å' if screenshot else '–ù–µ—Ç'}\n\n"
        
        keyboard = []
        for order in pending_orders:
            keyboard.append([InlineKeyboardButton(f"–ó–∞–∫–∞–∑ #{order[0]}", callback_data=f'view_order_{order[0]}')])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel')])
        
        try:
            with open('main.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=order_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            await query.message.delete()
        except FileNotFoundError:
            await query.edit_message_text(
                order_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    elif data.startswith('view_order_'):
        if user.id != ADMIN_ID:
            return
        
        order_id = int(data.split('_')[2])
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM orders WHERE id = %s', (order_id,))
        order = cursor.fetchone()
        conn.close()
        
        if order:
            order_id, user_id, username, product, amount, screenshot, status, created_at = order
            order_text = (
                f"üì¶ *–ó–∞–∫–∞–∑ #{order_id}*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or 'N/A'} (ID: {user_id})\n"
                f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product}\n"
                f"üí∞ –°—É–º–º–∞: {amount}\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}"
            )
            
            try:
                with open('main.png', 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo,
                        caption=order_text,
                        reply_markup=order_management_menu(order_id),
                        parse_mode=ParseMode.MARKDOWN
                    )
                await query.message.delete()
            except FileNotFoundError:
                await query.edit_message_text(
                    order_text,
                    reply_markup=order_management_menu(order_id),
                    parse_mode=ParseMode.MARKDOWN
                )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif data.startswith('confirm_'):
        if user.id != ADMIN_ID:
            return
        
        order_id = int(data.split('_')[1])
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute('UPDATE orders SET status = %s WHERE id = %s', ('confirmed', order_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute('SELECT user_id, product FROM orders WHERE id = %s', (order_id,))
        order_info = cursor.fetchone()
        conn.commit()
        conn.close()
        
        if order_info:
            user_id, product = order_info
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n–ü—Ä–æ–¥—É–∫—Ç: {product}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        confirmation_text = "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω."
        try:
            with open('main.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=confirmation_text,
                    reply_markup=admin_menu()
                )
            await query.message.delete()
        except FileNotFoundError:
            await query.edit_message_text(
                confirmation_text,
                reply_markup=admin_menu()
            )
    
    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif data.startswith('reject_'):
        if user.id != ADMIN_ID:
            return
        
        order_id = int(data.split('_')[1])
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute('UPDATE orders SET status = %s WHERE id = %s', ('rejected', order_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute('SELECT user_id, product FROM orders WHERE id = %s', (order_id,))
        order_info = cursor.fetchone()
        conn.commit()
        conn.close()
        
        if order_info:
            user_id, product = order_info
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå *–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n–ü—Ä–æ–¥—É–∫—Ç: {product}\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        rejection_text = "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω."
        try:
            with open('main.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=rejection_text,
                    reply_markup=admin_menu()
                )
            await query.message.delete()
        except FileNotFoundError:
            await query.edit_message_text(
                rejection_text,
                reply_markup=admin_menu()
            )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif data == 'admin_stats':
        if user.id != ADMIN_ID:
            return
        
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('SELECT COUNT(*) FROM orders')
        total_orders = cursor.fetchone()[0]
        
        # –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
        cursor.execute('SELECT COUNT(*) FROM orders WHERE status = %s', ('pending',))
        pending_orders = cursor.fetchone()[0]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        cursor.execute('SELECT COUNT(*) FROM orders WHERE status = %s', ('confirmed',))
        confirmed_orders = cursor.fetchone()[0]
        
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        cursor.execute('SELECT COUNT(*) FROM orders WHERE status = %s', ('rejected',))
        rejected_orders = cursor.fetchone()[0]
        
        conn.close()
        
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤*\n\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending_orders}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {confirmed_orders}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {rejected_orders}"
        )
        
        try:
            with open('main.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=stats_text,
                    reply_markup=admin_menu(),
                    parse_mode=ParseMode.MARKDOWN
                )
            await query.message.delete()
        except FileNotFoundError:
            await query.edit_message_text(
                stats_text,
                reply_markup=admin_menu(),
                parse_mode=ParseMode.MARKDOWN
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–ø–ª–∞—Ç—ã)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_payment'):
        error_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ö—É–ø–∏—Ç—å'"
        await send_message_with_photo(update, context, error_text, main_menu())
        return
    
    user = update.message.from_user
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    products = {
        'buy_1month': {'name': 'Fatality Client 1 –º–µ—Å—è—Ü', 'price': '50‚ÇΩ/0.5$'},
        'buy_beta': {'name': 'Fatality Client Beta –Ω–∞–≤—Å–µ–≥–¥–∞', 'price': '199‚ÇΩ/2$'},
        'buy_forever': {'name': 'Fatality Client –ù–∞–≤—Å–µ–≥–¥–∞', 'price': '599‚ÇΩ/6$'}
    }
    
    product_data = products[context.user_data['awaiting_payment']]
    
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO orders (user_id, username, product, amount, screenshot) VALUES (%s, %s, %s, %s, %s)',
        (user.id, user.username, product_data['name'], product_data['price'], 'yes')
    )
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_text = (
        f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'N/A'} (ID: {user.id})\n"
        f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_data['name']}\n"
        f"üí∞ –°—É–º–º–∞: {product_data['price']}\n"
        f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=photo.file_id,
            caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
            reply_to_message_id=admin_message.message_id
        )
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    confirmation_text = "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å."
    await send_message_with_photo(update, context, confirmation_text, main_menu())
    context.user_data['awaiting_payment'] = None

# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    admin_text = "üë®‚Äçüíº *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*"
    await send_message_with_photo(update, context, admin_text, admin_menu(), ParseMode.MARKDOWN)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
    application.run_polling()

if __name__ == '__main__':
    main()
